<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AclUserGroup extends \App\Entity\AclUserGroup implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'id', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'active', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'permission', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'adm', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'permissions', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'users', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'translateKey'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'id', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'active', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'permission', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'adm', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'permissions', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'users', '' . "\0" . 'App\\Entity\\AclUserGroup' . "\0" . 'translateKey'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AclUserGroup $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function isActive(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive(bool $active): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermission(): ?\App\Entity\AclPermission
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermission', []);

        return parent::getPermission();
    }

    /**
     * {@inheritDoc}
     */
    public function setPermission(?\App\Entity\AclPermission $permission): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPermission', [$permission]);

        return parent::setPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function isAdm(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAdm', []);

        return parent::isAdm();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdm(bool $adm): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdm', [$adm]);

        return parent::setAdm($adm);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addPermission(\App\Entity\AclPermission $permission): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPermission', [$permission]);

        return parent::addPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function removePermission(\App\Entity\AclPermission $permission): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePermission', [$permission]);

        return parent::removePermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\App\Entity\User $user): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\App\Entity\User $user): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslateKey(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslateKey', []);

        return parent::getTranslateKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslateKey(string $translateKey): \App\Entity\AclUserGroup
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslateKey', [$translateKey]);

        return parent::setTranslateKey($translateKey);
    }

}
